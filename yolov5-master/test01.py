"""# 筛选大拇指、中指、小拇指"""

'''
class_mapping = {
    'DistalPhalanx': 0,
    'MCP': 1,
    'MCPFirst': 2,
    'MiddlePhalanx': 3,
    'ProximalPhalanx': 4,
    'Radius': 5,
    'Ulna': 6,
}
'''
import torch

# out = torch.tensor([[126.38541, 330.92725, 170.91788, 379.10059, 0.84851, 4.00000],
#                     [174.04999, 512.06061, 226.31772, 602.05658, 0.83037, 6.00000],
#                     [210.83983, 275.29303, 254.26054, 337.46283, 0.82925, 4.00000],
#                     [363.41141, 312.14801, 426.83066, 378.78540, 0.82285, 0.00000],
#                     [260.12900, 275.44077, 305.21066, 341.15652, 0.82112, 4.00000],
#                     [146.76711, 160.44511, 196.03590, 224.09883, 0.81877, 0.00000],
#                     [168.84961, 291.55869, 211.14124, 352.65695, 0.81266, 4.00000],
#                     [213.05302, 136.18706, 263.48795, 200.89101, 0.80950, 0.00000],
#                     [178.18225, 338.35828, 213.85654, 410.09125, 0.80586, 1.00000],
#                     [292.14108, 164.70779, 342.50522, 226.86905, 0.80487, 0.00000],
#                     [66.83707, 250.86008, 112.95599, 303.02719, 0.80415, 0.00000],
#                     [209.08560, 323.76697, 249.42316, 400.87988, 0.80235, 1.00000],
#                     [325.52307, 364.67703, 376.64478, 417.30014, 0.79726, 4.00000],
#                     [264.03027, 412.31174, 336.72711, 482.23758, 0.79725, 2.00000],
#                     [218.47168, 493.75330, 286.58429, 596.09460, 0.79545, 5.00000],
#                     [252.35194, 325.20032, 294.09409, 398.58502, 0.78606, 1.00000],
#                     [152.28120, 235.37833, 203.41975, 282.09909, 0.78528, 3.00000],
#                     [274.68570, 227.44533, 328.69199, 279.17609, 0.78486, 3.00000],
#                     [99.25774, 300.92191, 141.66978, 341.24557, 0.77509, 3.00000],
#                     [147.24506, 358.93152, 184.80045, 431.36096, 0.77486, 1.00000],
#                     [211.73257, 213.58215, 263.13187, 261.86221, 0.74805, 3.00000]], device='cuda:0')

'''
out1：输出的结果
cls：类别
num：某一类指关节的数量
flag：有些取三个，有些取两个
'''


def choose_bone(out1, cls, num, flag):
    # 模型的输出 左上角、右下角、置信度、分类
    # 寻找dip即类别为0的下标
    indexs = torch.where(out1[:, -1] == cls)

    # 首先判断模型训练出来的模型、识别出来的dip的数量是不是5个
    # 如果是，就筛选出来，不是，就不筛选出来
    if len(indexs[0]) != num:
        print('检测个数不正确')
        return None
    boxes = out1[indexs]
    # print(boxes)
    # 根据x1排序，这里默认是升序
    sort = boxes[:, 0].argsort()
    # print(sort)
    boxes2 = boxes[sort]
    # print(boxes2)
    # 排序完了之后，直接筛选1、3、5就行
    result = boxes2[flag]
    # print(result)
    return result


def bone_filter(out):
    DistalPhalanx = choose_bone(out,0,5,[0,2,4])
    MCP = choose_bone(out,1,4,[0,2])
    MCPFirst = choose_bone(out,2,1,[0])
    MiddlePhalanx = choose_bone(out,3,4,[0,2])
    ProximalPhalanx = choose_bone(out,4,5,[0,2])
    Radius = choose_bone(out,5,1,[0])
    Ulna = choose_bone(out,6,1,[0])
    if (DistalPhalanx == None)or (MCP == None) or(MCPFirst == None) or(MiddlePhalanx == None)or (ProximalPhalanx == None)or (Radius == None) or (Ulna== None):
        return None
    # 将七个类别的结果合并在一起
    # 拼接的时候要看test的图，要从外开始向内拼，不要瞎拼
    return torch.cat([DistalPhalanx,MiddlePhalanx,ProximalPhalanx,MCP,MCPFirst,Ulna,Radius],dim=0)

# if __name__ == '__main__':
#     print(bone_filter(out))